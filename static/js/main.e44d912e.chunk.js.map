{"version":3,"sources":["store/actionCreator/actionCreators.js","components/UsersRender.jsx","App.jsx","store/rootReducer/rootReducer.js","store/rootReducer/store.js","index.js"],"names":["getData","data","type","UsersRender","dispatch","useDispatch","users","useSelector","state","login","getDataFromServer","fetch","response","json","result","iteration","filter","el","id","localStorage","setItem","JSON","stringify","useEffect","deleteDataHandler","payload","deleteData","removeItem","onClick","axios","post","Error","message","postDataToServer","title","then","toast","success","catch","err","error","map","name","App","loginInitialState","isSucces","rootReducer","combineReducers","action","newData","item","i","taskId","console","log","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"2NAEaA,EAAU,SAACC,GACtB,MAAO,CACLC,KAAM,MACND,KAAMA,EAEV,E,OC0DeE,EAxDK,WAClB,IAAMC,EAAWC,cAETC,EAAUC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAA5CH,MAEFI,EAAiB,iDAAG,gHACHN,EDLvB,iDAAO,WAAOA,GAAQ,mGACGO,MAAM,8CAA8C,KAAD,EAA5D,OAARC,EAAQ,gBACKA,EAASC,OAAO,KAAD,EACV,OADlBZ,EAAI,OACVG,EAASJ,EAAQC,IAAO,kBACjBA,GAAI,2CACZ,mDALD,ICKoD,KAAD,EAA3Ca,EAAM,OAENC,EAAYD,EAAOE,QAAO,SAACC,GAC/B,OAAOA,EAAGC,GAAK,IAAM,CACvB,IAEAC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,IAAY,2CACzD,kBARsB,mCAUvBQ,qBAAU,WACRC,GACF,GAAG,IAEH,IAAMA,EAAoB,SAACN,GACzBd,EDGsB,SAACc,GACzB,MAAO,CACLhB,KAAM,SACNuB,QAASP,EAEb,CCRaQ,CAAWR,IACpBC,aAAaQ,WAAW,OAC1B,EAgBA,OACE,gCACE,wBAAQC,QAASlB,EAAkB,sBACnC,wBAAQkB,QAjBS,WAKnBxB,EDpB4B,SAACH,GAC/B,wDAAO,WAAOG,GAAQ,0GAEKyB,IAAMC,KAC3B,6CACA7B,GACA,KAAD,EAHa,OAARW,EAAQ,yBAIPA,EAASX,MAAI,sCAEd,IAAI8B,MAAM,KAAMC,SAAS,KAAD,oDAEjC,mDAVD,EAWF,CCQaC,CAJI,CACXC,MAAO5B,KAIN6B,MAAK,WACJC,IAAMC,QAAQ,UAChB,IACCC,OAAM,SAACC,GACNH,IAAMI,MAAMD,EAAIP,QAClB,GACJ,EAKkC,uBAC9B,wBAAQJ,QAAS,kBAAMJ,EAAkBlB,EAAMY,GAAG,EAAC,yBACnD,4OACCZ,EAAMmC,KAAI,SAACxC,GACV,OACE,gCACE,6BAAKA,EAAKiB,KACV,6BAAKjB,EAAKyC,SAFFzC,EAAKiB,GAKnB,MAGN,ECrDeyB,MARf,WACE,OACE,8BACE,cAAC,EAAW,KAGlB,E,uBCNMC,EAAoB,CACxBtC,MAAO,GACPuC,UAAU,EACVL,MAAO,MAuCIM,EAAcC,YAAgB,CACzCtC,MArCmB,WAAwC,IAAvCD,EAAK,uDAAGoC,EAAmBI,EAAM,uCACrD,GAAoB,QAAhBA,EAAO9C,KAAgB,CACzB,IAAM+C,EAAUD,EAAO/C,KAAKe,QAAO,SAACkC,EAAMC,GAAC,OAAKA,EAAI,CAAC,IACrD,OAAO,2BACF3C,GAAK,IACRF,MAAO2C,GAEX,CAEA,GAAoB,WAAhBD,EAAO9C,KAAmB,CAC5B,IAAMkD,EAASJ,EAAOvB,QAChBC,EAAalB,EAAMF,MAAMU,QAAO,SAACf,GAAI,OAAKA,EAAKiB,KAAOkC,CAAM,IAElE,OADAC,QAAQC,IAAI5B,GACL,2BACFlB,GAAK,IACRF,MAAOoB,GAEX,CAEA,MAAoB,WAAhBsB,EAAO9C,KACF,2BACFM,GAAK,IACRqC,UAAU,IAIM,UAAhBG,EAAO9C,KACF,2BACFM,GAAK,IACRgC,MAAOQ,EAAOvB,UAIXjB,CACT,ICrCe+C,EADDC,YAAYV,EAAaW,YAAgBC,M,MCMvDC,IAASC,OACP,eAAC,IAAQ,CAACL,MAAOA,EAAM,UACrB,cAAC,IAAc,IACf,cAAC,EAAG,OAENM,SAASC,eAAe,Q","file":"static/js/main.e44d912e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getData = (data) => {\r\n  return {\r\n    type: \"GET\",\r\n    data: data,\r\n  };\r\n};\r\n\r\nexport const asyncSendRequest = () => {\r\n  return async (dispatch) => {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await response.json();\r\n    dispatch(getData(data));\r\n    return data;\r\n  };\r\n};\r\n\r\nexport const postDataToServer = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://jsonplaceholder.typicode.com/users\",\r\n        data\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteData = (id) => {\r\n  return {\r\n    type: \"DELETE\",\r\n    payload: id,\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  asyncSendRequest,\r\n  deleteData,\r\n  postDataToServer,\r\n} from \"../store/actionCreator/actionCreators\";\r\n\r\nconst UsersRender = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { users } = useSelector((state) => state.login);\r\n\r\n  const getDataFromServer = async () => {\r\n    const result = await dispatch(asyncSendRequest());\r\n\r\n    const iteration = result.filter((el) => {\r\n      return el.id % 2 == -0;\r\n    });\r\n\r\n    localStorage.setItem(\"data\", JSON.stringify(iteration));\r\n  };\r\n\r\n  useEffect(() => {\r\n    deleteDataHandler();\r\n  }, []);\r\n\r\n  const deleteDataHandler = (id) => {\r\n    dispatch(deleteData(id));\r\n    localStorage.removeItem(\"data\");\r\n  };\r\n\r\n  const postToServer = () => {\r\n    const data = {\r\n      title: users,\r\n    };\r\n\r\n    dispatch(postDataToServer(data))\r\n      .then(() => {\r\n        toast.success(\"Succes!\");\r\n      })\r\n      .catch((err) => {\r\n        toast.error(err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={getDataFromServer}>Get Data</button>\r\n      <button onClick={postToServer}>Post Data</button>\r\n      <button onClick={() => deleteDataHandler(users.id)}>Delete Data</button>\r\n      <h1>Для удаления с UI ,надо обновить страницу!</h1>\r\n      {users.map((data) => {\r\n        return (\r\n          <div key={data.id}>\r\n            <li>{data.id}</li>\r\n            <li>{data.name}</li>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersRender;\r\n","import UsersRender from \"./components/UsersRender\";\n\nfunction App() {\n  return (\n    <div>\n      <UsersRender />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\n\r\nconst loginInitialState = {\r\n  users: [],\r\n  isSucces: false,\r\n  error: null,\r\n};\r\n\r\nconst loginReducer = (state = loginInitialState, action) => {\r\n  if (action.type === \"GET\") {\r\n    const newData = action.data.filter((item, i) => i % 2);\r\n    return {\r\n      ...state,\r\n      users: newData,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DELETE\") {\r\n    const taskId = action.payload;\r\n    const deleteData = state.users.filter((data) => data.id !== taskId);\r\n    console.log(deleteData);\r\n    return {\r\n      ...state,\r\n      users: deleteData,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"SUCCES\") {\r\n    return {\r\n      ...state,\r\n      isSucces: true,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ERROR\") {\r\n    return {\r\n      ...state,\r\n      error: action.payload,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  login: loginReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/rootReducer/store\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ToastContainer />\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}